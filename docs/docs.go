// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/subscriptions": {
            "get": {
                "description": "Возвращает список подписок с пагинацией",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "subscriptions"
                ],
                "summary": "Получить список подписок",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Лимит записей",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Смещение",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Список подписок",
                        "schema": {
                            "$ref": "#/definitions/response.ListSubscriptionsResponse"
                        }
                    },
                    "400": {
                        "description": "Неверные параметры запроса",
                        "schema": {
                            "$ref": "#/definitions/response.Error400"
                        }
                    },
                    "404": {
                        "description": "Подписки не найдены",
                        "schema": {
                            "$ref": "#/definitions/response.Error404"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/response.Error500"
                        }
                    }
                }
            },
            "post": {
                "description": "Создаёт новую запись о подписке для пользователя",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "subscriptions"
                ],
                "summary": "Создать подписку",
                "parameters": [
                    {
                        "description": "Новая подписка",
                        "name": "subscription",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/payload.CreateSubscriptionPayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/response.GetSubscriptionResponse"
                        }
                    },
                    "400": {
                        "description": "Неверный JSON или валидация не пройдена",
                        "schema": {
                            "$ref": "#/definitions/response.Error400"
                        }
                    },
                    "409": {
                        "description": "Подписка уже существует",
                        "schema": {
                            "$ref": "#/definitions/response.Error409"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/response.Error500"
                        }
                    }
                }
            }
        },
        "/subscriptions/summary": {
            "get": {
                "description": "Подсчитывает общую стоимость подписок за указанный период с фильтрацией по user_id и названию сервиса",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "subscriptions"
                ],
                "summary": "Подсчёт суммарной стоимости подписок",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"60601fee-2bf1-4721-ae6f-7636e79a0cba\"",
                        "description": "UUID пользователя",
                        "name": "user_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"Yandex Plus\"",
                        "description": "Название сервиса",
                        "name": "service",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"2025-07-01\"",
                        "description": "Дата начала периода YYYY-MM-DD",
                        "name": "start_date",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "\"2025-08-31\"",
                        "description": "Дата конца периода YYYY-MM-DD",
                        "name": "end_date",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Сумма подписок",
                        "schema": {
                            "$ref": "#/definitions/response.SubscriptionSummaryResponse"
                        }
                    },
                    "400": {
                        "description": "Неверный формат запроса или параметров",
                        "schema": {
                            "$ref": "#/definitions/response.Error400"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/response.Error500"
                        }
                    }
                }
            }
        },
        "/subscriptions/{id}": {
            "get": {
                "description": "Возвращает данные подписки по её UUID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "subscriptions"
                ],
                "summary": "Получить подписку по ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID подписки (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Подписка найдена",
                        "schema": {
                            "$ref": "#/definitions/response.GetSubscriptionResponse"
                        }
                    },
                    "400": {
                        "description": "Неверный UUID",
                        "schema": {
                            "$ref": "#/definitions/response.Error400"
                        }
                    },
                    "404": {
                        "description": "Подписка не найдена",
                        "schema": {
                            "$ref": "#/definitions/response.Error404"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/response.Error500"
                        }
                    }
                }
            },
            "put": {
                "description": "Обновляет существующую запись о подписке по ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "subscriptions"
                ],
                "summary": "Обновить подписку",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID подписки (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Данные для обновления",
                        "name": "subscription",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/payload.UpdateSubscriptionPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Подписка успешно обновлена",
                        "schema": {
                            "$ref": "#/definitions/response.SubscriptionUpdated"
                        }
                    },
                    "400": {
                        "description": "Неверный UUID или JSON",
                        "schema": {
                            "$ref": "#/definitions/response.Error400"
                        }
                    },
                    "404": {
                        "description": "Подписка не найдена",
                        "schema": {
                            "$ref": "#/definitions/response.Error404"
                        }
                    },
                    "409": {
                        "description": "Подписка уже существует",
                        "schema": {
                            "$ref": "#/definitions/response.Error409"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/response.Error500"
                        }
                    }
                }
            },
            "delete": {
                "description": "Удаляет подписку по UUID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "subscriptions"
                ],
                "summary": "Удалить подписку",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID подписки (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Подписка успешно удалена",
                        "schema": {
                            "$ref": "#/definitions/response.DeleteSubscriptionResponse"
                        }
                    },
                    "400": {
                        "description": "Неверный UUID",
                        "schema": {
                            "$ref": "#/definitions/response.Error400"
                        }
                    },
                    "404": {
                        "description": "Подписка не найдена",
                        "schema": {
                            "$ref": "#/definitions/response.Error404"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/response.Error500"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "payload.CreateSubscriptionPayload": {
            "type": "object",
            "required": [
                "price",
                "service",
                "start_date",
                "user_id"
            ],
            "properties": {
                "end_date": {
                    "type": "string",
                    "example": "08-2025"
                },
                "price": {
                    "type": "integer",
                    "example": 400
                },
                "service": {
                    "type": "string",
                    "example": "Yandex Plus"
                },
                "start_date": {
                    "type": "string",
                    "example": "07-2025"
                },
                "user_id": {
                    "type": "string",
                    "example": "60601fee-2bf1-4721-ae6f-7636e79a0cba"
                }
            }
        },
        "payload.UpdateSubscriptionPayload": {
            "type": "object",
            "required": [
                "price",
                "service",
                "start_date"
            ],
            "properties": {
                "end_date": {
                    "type": "string",
                    "example": "08-2025"
                },
                "price": {
                    "type": "integer",
                    "example": 400
                },
                "service": {
                    "type": "string",
                    "example": "Yandex Plus"
                },
                "start_date": {
                    "type": "string",
                    "example": "07-2025"
                }
            }
        },
        "response.DeleteSubscriptionResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "subscription deleted successfully"
                }
            }
        },
        "response.Error400": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "example": "400"
                },
                "error": {
                    "type": "string",
                    "example": "invalid request body"
                },
                "request_id": {
                    "type": "string",
                    "example": "req-12345"
                }
            }
        },
        "response.Error404": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "example": "404"
                },
                "error": {
                    "type": "string",
                    "example": "subscription not found"
                },
                "request_id": {
                    "type": "string",
                    "example": "req-99999"
                }
            }
        },
        "response.Error409": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "example": "409"
                },
                "error": {
                    "type": "string",
                    "example": "subscription already exists"
                },
                "request_id": {
                    "type": "string",
                    "example": "req-45678"
                }
            }
        },
        "response.Error500": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "example": "500"
                },
                "error": {
                    "type": "string",
                    "example": "internal server error"
                },
                "request_id": {
                    "type": "string",
                    "example": "req-78901"
                }
            }
        },
        "response.GetSubscriptionResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string",
                    "example": "2025-07-01 12:00:00"
                },
                "end_date": {
                    "type": "string",
                    "example": "08-2025"
                },
                "id": {
                    "type": "string",
                    "example": "60601fee-2bf1-4721-ae6f-7636e79a0cba"
                },
                "price": {
                    "type": "integer",
                    "example": 400
                },
                "service": {
                    "type": "string",
                    "example": "Yandex Plus"
                },
                "start_date": {
                    "type": "string",
                    "example": "07-2025"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2025-07-01 12:00:00"
                },
                "user_id": {
                    "type": "string",
                    "example": "60601fee-2bf1-4721-ae6f-7636e79a0cba"
                }
            }
        },
        "response.ListSubscriptionsResponse": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer",
                    "example": 2
                },
                "subscriptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/response.GetSubscriptionResponse"
                    }
                }
            }
        },
        "response.SubscriptionSummaryResponse": {
            "type": "object",
            "properties": {
                "total": {
                    "type": "integer",
                    "example": 1200
                }
            }
        },
        "response.SubscriptionUpdated": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "subscription updated successfully"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
